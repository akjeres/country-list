{"version":3,"sources":["helpers/Countries-getter.js","components/button/index.js","components/button/button.js","components/country/index.js","components/country/country.js","components/countries/index.js","components/countries/countries.js","components/loader/index.js","components/loader/loader.js","components/error/index.js","components/error/error.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","CountriesGetter","_base","get","body","a","post","JSON","parse","res","data","console","error","Error","Button","this","props","text","onClick","className","disabled","React","Component","Country","item","collapsed","children_property_name","Object","keys","filter","i","children_tags","map","key","code","state","length","e","log","target","setState","children_style","handle_click","handleClick","bind","name","style","display","Countries","continents","country","Loader","App","countries","has_error","loading","then","catch","err","finally","result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1be707eb.chunk.js","sourcesContent":["const axios = require('axios');\r\nexport default class CountriesGetter {\r\n    _base = 'https://countries.trevorblades.com';\r\n\r\n    get = async (body) => {\r\n        try {\r\n            const res = await axios.post(\r\n                this._base,\r\n                {...JSON.parse(body)}\r\n            );\r\n\r\n            return res.data;\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw new Error(`Could not fetch ${this._base}`);\r\n        }\r\n    }\r\n}","import Button from \"./button\";\r\n\r\nexport default Button;","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nexport default class Button extends React.Component {\r\n\r\n    render() {\r\n        const { text, onClick } = this.props;\r\n        return(\r\n            <button className=\"button\" onClick={ onClick } disabled={ !onClick }>{ text }</button>\r\n        );\r\n    };\r\n}","import Country from \"./country\";\r\n\r\nexport default Country;","import React from \"react\";\r\nimport './country.css';\r\nimport Button from \"../button\";\r\n\r\nexport default class Country extends React.Component {\r\n    constructor({ item, collapsed }) {\r\n        super();\r\n\r\n        let children_property_name = Object.keys(item).filter(i => {\r\n            return ('code' !== i) && ('name' !== i);\r\n        })[0];\r\n\r\n        this.children_tags = (item[children_property_name] || []).map(i => {\r\n            return <Country key={ i.code } item={ i } collapsed={ collapsed }/>;\r\n        });\r\n\r\n        this.state = { collapsed: collapsed || item[children_property_name].length };\r\n    };\r\n\r\n    handleClick(e) {\r\n        console.log(e.target);\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const children_style = this.state.collapsed ? 'none' : null;\r\n        const handle_click = this.children_tags.length ? this.handleClick.bind(this) : null;\r\n        return(\r\n            <div className=\"children\">\r\n                <div className=\"parent\">{ <Button onClick={ handle_click }\r\n                                                  text={ this.props.item.name } /> }</div>\r\n                <div style={{\r\n                    display: children_style,\r\n                }}>\r\n                    { this.children_tags }\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}","import Countries from \"./countries\";\r\n\r\nexport default Countries;","import React from \"react\";\r\nimport './countries.css';\r\nimport Country from \"../country\";\r\n\r\nexport default class Countries extends React.Component {\r\n    constructor({ data }) {\r\n        super();\r\n        this.data = data.continents;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.data);\r\n        return(\r\n          <div className=\"countries\">{\r\n                  this.data.map((country) => {\r\n                      return (\r\n                          <Country key={ country.code } item={ country } collapsed={ true } />\r\n                      )\r\n                  })\r\n              }</div>\r\n      );\r\n    };\r\n}","import { Loader } from './loader';\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport './loader.css';\r\n\r\nexport const Loader = () => {\r\n  return(\r\n      <div className=\"preloader\">\r\n          <div className=\"lds-ring\">\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n          </div>\r\n      </div>\r\n  );\r\n};","import { Error } from './error';\r\n\r\nexport default Error;","import React from \"react\";\r\nimport \"./error.css\";\r\n\r\nexport const Error = () => {\r\n  return(\r\n      <div className=\"error-wrapper\">\r\n          <p className=\"error\">Error</p>\r\n      </div>\r\n  );\r\n};","import React from 'react';\nimport \"./App.css\";\nimport CountriesGetter from \"./helpers/Countries-getter\";\nimport Countries from \"./components/countries\";\nimport Loader from \"./components/loader\";\nimport Error from \"./components/error\";\n\nexport default class App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            has_error: false,\n            loading: true,\n        }\n    }\n\n    countries = new CountriesGetter();\n\n    componentDidMount() {\n        const request_body = \"{\\\"operationName\\\":null,\\\"variables\\\":{},\\\"query\\\":\\\"{\\\\n  continents {\\\\n    code\\\\n    name\\\\n    countries {\\\\n      code\\\\n      name\\\\n      languages {\\\\n        code\\\\n        name\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n\\\"}\";\n        const data = this.countries.get;\n\n        data(request_body)\n            .then(res => {\n                this.setState({\n                    data: res.data,\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({\n                    has_error: true,\n                })\n            })\n            .finally(() => {\n                this.setState({\n                    loading: false,\n                })\n            });\n    }\n\n    render() {\n        const { loading, has_error } = this.state;\n        const data = has_error ? <Error /> : <Countries data={ this.state.data }/>;\n        const result = loading ? <Loader /> : data;\n\n        return (\n            <div className=\"App\">{ result }</div>\n        );\n    };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}