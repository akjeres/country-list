{"version":3,"sources":["helpers/Countries-getter.js","components/button/index.js","components/button/button.js","AppContext.js","components/country/country.js","components/country/index.js","components/countries/index.js","components/countries/countries.js","components/loader/index.js","components/loader/loader.js","components/error/index.js","components/error/error.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","CountriesGetter","_base","get","body","a","post","JSON","parse","res","data","console","error","Error","Button","this","props","text","onClick","className","disabled","React","Component","AppContext","createContext","target","nodes","toggleCollapse","Country","item","collapsed","children_property_name","Object","keys","filter","i","state","length","children_tags","map","key","code","e","context","push","children_style","handle_click","handleClick","bind","name","style","display","contextType","Countries","continents","path","ref","result","_reactInternalFiber","_debugID","len","get_tag_id","component","prop_for_comparison","items","items_len","j","stringify","get_path","forEach","state_collapsed","indexOf","setState","call","Provider","value","country","Loader","App","countries","has_error","loading","then","catch","err","finally","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.63e2a03f.chunk.js","sourcesContent":["const axios = require('axios');\nexport default class CountriesGetter {\n    _base = 'https://countries.trevorblades.com';\n\n    get = async (body) => {\n        try {\n            const res = await axios.post(\n                this._base,\n                {...JSON.parse(body)}\n            );\n\n            return res.data;\n        } catch (error) {\n            console.error(error);\n            throw new Error(`Could not fetch ${this._base}`);\n        }\n    }\n}","import Button from \"./button\";\r\n\r\nexport default Button;","import React from \"react\";\nimport \"./button.css\";\n\nexport default class Button extends React.Component {\n\n    render() {\n        const { text, onClick } = this.props;\n        return(\n            <button className=\"button\" onClick={ onClick } disabled={ !onClick }>{ text }</button>\n        );\n    };\n}","import React from 'react';\r\n\r\nconst AppContext = React.createContext({\r\n    target: null,\r\n    nodes: [],\r\n    toggleCollapse: () => {},\r\n});\r\n\r\nexport default AppContext;","import React from \"react\";\nimport './country.css';\nimport Button from \"../button\";\nimport AppContext from \"../../AppContext\";\n\nclass Country extends React.Component {\n    constructor({ item, collapsed }) {\n        super();\n\n        let children_property_name = Object.keys(item).filter(i => {\n            return ('code' !== i) && ('name' !== i);\n        })[0];\n\n        this.state = { collapsed: collapsed || item[children_property_name].length };\n\n        this.children_tags = (item[children_property_name] || []).map(i => {\n            return <Country key={ i.code } item={ i } collapsed={ collapsed } />;\n        });\n    };\n\n    handleClick(e) {\n        this.context.toggleCollapse(this);\n    };\n\n    componentDidMount() {\n        this.context.nodes.push(this);\n    }\n\n\n    render() {\n        const children_style = this.state.collapsed ? 'none' : null;\n        const handle_click = this.children_tags.length ? this.handleClick.bind(this) : null;\n        return(\n            <div className=\"children\">\n                <div className=\"parent\">{ <Button onClick={ handle_click }\n                                                  text={ this.props.item.name } /> }</div>\n                <div style={{\n                    display: children_style,\n                }}>\n                    { this.children_tags }\n                </div>\n            </div>\n        );\n    };\n}\nCountry.contextType = AppContext;\n\nexport default Country;","import Country from \"./country\";\r\n\r\nexport default Country;","import Countries from \"./countries\";\n\nexport default Countries;","import React from \"react\";\nimport './countries.css';\nimport Country from \"../country\";\nimport AppContext from \"../../AppContext\";\n\nfunction get_path(nodes, ref) {\n    const result = [ ref._reactInternalFiber._debugID ];\n    let item = ref.props.item;\n    const len = nodes.length;\n\n    // Push ref._reactInternalFiber._debugID if item in not code not name in item of element\n    function get_tag_id() {\n        for (let i = 0; i < len; i++) {\n            const component = nodes[i];\n            const prop_for_comparison = Object.keys(component.props.item).filter(key => {\n                return ('code' !== key && 'name' !== key);\n            })[0];\n            if (prop_for_comparison) {\n                const items = component.props.item[prop_for_comparison];\n                const items_len = items.length;\n                //console.log(JSON.stringify(item) === JSON.stringify(component[j]));\n                // const items_len = component[prop_for_comparison].length;\n                for (let j = 0; j < items_len; j++ ) {\n                    if (JSON.stringify(item) === JSON.stringify(items[j])) {\n                        //console.log(component._reactInternalFiber._debugID);\n                        result.push(component._reactInternalFiber._debugID);\n                        item = component.props.item;\n                        return get_tag_id();\n                    }\n                }\n            }\n        }\n    }\n    get_tag_id();\n    /*console.log(nodes, ref);\n    console.log(item);*/\n\n    return result;\n}\n\nexport default class Countries extends React.Component {\n    constructor({ data }) {\n        super();\n        this.data = data.continents;\n\n        this.toggleCollapse = (e) => {\n            const nodes = this.state.nodes;\n            const path = get_path(nodes, e); // Get VirtualDOM tree path to target\n            this.state.nodes.forEach(i => {\n                let state_collapsed = true;\n                if (~path.indexOf(i._reactInternalFiber._debugID)) { //If i exist in VirtualDOM tree path\n                    if (i === e) {\n                        state_collapsed = !i.state.collapsed;        // Action with target\n                    } else {\n                        state_collapsed = false;                     // Expand all other path\n                    }\n                }\n                this.setState.call(i, {\n                    collapsed: state_collapsed\n                });\n            });\n            this.setState.bind(this,{\n                target: e\n            });\n        };\n\n        this.state = {\n            target: null,\n            nodes: [],\n            toggleCollapse: this.toggleCollapse\n        }\n    }\n\n    render() {\n        return(\n            <AppContext.Provider value={ this.state }>\n                <div className=\"countries\">{\n                    this.data.map((country) => {\n                        return (\n                            <Country key={ country.code } item={ country } collapsed={ true } />\n                        )\n                    })\n                }</div>\n            </AppContext.Provider>\n      );\n    };\n}","import { Loader } from './loader';\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport './loader.css';\r\n\r\nexport const Loader = () => {\r\n  return(\r\n      <div className=\"preloader\">\r\n          <div className=\"lds-ring\">\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n          </div>\r\n      </div>\r\n  );\r\n};","import { Error } from './error';\r\n\r\nexport default Error;","import React from \"react\";\r\nimport \"./error.css\";\r\n\r\nexport const Error = () => {\r\n  return(\r\n      <div className=\"error-wrapper\">\r\n          <p className=\"error\">Error</p>\r\n      </div>\r\n  );\r\n};","import React from 'react';\nimport \"./App.css\";\nimport CountriesGetter from \"./helpers/Countries-getter\";\nimport Countries from \"./components/countries\";\nimport Loader from \"./components/loader\";\nimport Error from \"./components/error\";\n\nexport default class App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            has_error: false,\n            loading: true,\n        }\n    }\n\n    countries = new CountriesGetter();\n\n    componentDidMount() {\n        const request_body = \"{\\\"operationName\\\":null,\\\"variables\\\":{},\\\"query\\\":\\\"{\\\\n  continents {\\\\n    code\\\\n    name\\\\n    countries {\\\\n      code\\\\n      name\\\\n      languages {\\\\n        code\\\\n        name\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n\\\"}\";\n        const data = this.countries.get;\n\n        data(request_body)\n            .then(res => {\n                this.setState({\n                    data: res.data,\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({\n                    has_error: true,\n                })\n            })\n            .finally(() => {\n                this.setState({\n                    loading: false,\n                })\n            });\n    }\n\n    render() {\n        const { loading, has_error } = this.state;\n        const data = has_error ? <Error /> : <Countries data={ this.state.data }/>;\n        const result = loading ? <Loader /> : data;\n\n        return (\n            <div className=\"App\">{ result }</div>\n        );\n    };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}